{
	"info": {
		"_postman_id": "ec687817-2474-4a0a-a682-77ed6b3b976d",
		"name": "To-do List Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User related requests",
			"item": [
				{
					"name": "Registering one new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c55fe415-c1d4-4268-85ba-4a8ed4a08212",
								"exec": [
									"//we got random email value after this request",
									"//we need extract that random email into {{userEmail}} variable",
									"//pm.environment.set(\"userEmail\",)",
									"var jsonData = pm.response.json();",
									"//console.log(jsonData.user.email);",
									"pm.environment.set(\"userEmail\", jsonData.user.email);",
									"pm.environment.set(\"userRegistrationToken\", jsonData.token);",
									"pm.environment.set(\"userId\", jsonData.user._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomFirstName}} {{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"Soccer123\",\n    \"age\":20\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/register",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login as user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c29cbb8-a774-4fbc-bfd6-15f8306018cf",
								"exec": [
									"var jsonData = pm.response.json();",
									"console.log(\"Here is what we got in our response body payload\");",
									"console.log(jsonData);",
									"pm.environment.set(\"userSessionToken\", jsonData.token);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{userEmail}}\",\n\t\"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user info who is currently logged in",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userSessionToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/user/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout a user currently in session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541db232-b4dc-41e0-abab-78059abedb7d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userSessionToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authentication",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZjQ2ZjZhOWE3MzgwOTAwMTc3Y2QzNmYiLCJpYXQiOjE1OTg0OTA3NjV9.wCnttL7QpA-7RQyP0ebP_cOlh_8iiVqa2aiAV9rlAoI",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/user/logout",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update once user's profile information",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb06862a-5c03-4ce9-9043-6a69ed757a9c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Updated echo message contains new age\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"89\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userRegistrationToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"age\": 89\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "User changes profile picture",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e6432e0-bef9-449b-8358-ac80377235be",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns User chagned profile picture\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userRegistrationToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "avatar",
									"type": "file",
									"src": "/Users/Sofia/Desktop/avatar.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/user/me/avatar",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"me",
								"avatar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get users profile picture",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b3ab090-56c7-4a64-9475-7fa89c143d56",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}user/{{userId}}/avatar",
							"host": [
								"{{baseURL}}user"
							],
							"path": [
								"{{userId}}",
								"avatar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete users profile picture",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba4efc0d-8e52-41c1-98b9-5e7c414a033c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userRegistrationToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/user/me/avatar",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"me",
								"avatar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete one register user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86ff6f6c-9d0f-4f41-ab49-b95baf65be80",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userRegistrationToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/user/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"me"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Task Related requests",
			"item": [
				{
					"name": "Registering one new user for Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0c94b08-b261-4b14-92a7-f1a1cf16319e",
								"exec": [
									"//we got random email value after this request",
									"//we need extract that random email into {{userEmail}} variable",
									"//pm.environment.set(\"userEmail\",)",
									"//var jsonData = pm.response.json();",
									"//console.log(jsonData.user.email);",
									"//pm.environment.set(\"userEmail\", jsonData.user.email);",
									"//pm.environment.set(\"userRegistrationToken\", jsonData.token);",
									"//pm.environment.set(\"userId\", jsonData.user._id);",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"taskid\",jsonData.token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomFirstName}} {{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"Soccer123\",\n    \"age\":20\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/register",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login as user for Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58d6c9bc-a983-4daf-9fee-f2b01ebe2c7a",
								"exec": [
									"var jsonData = pm.response.json();",
									"console.log(\"Here is what we got in our response body payload\");",
									"console.log(jsonData);",
									"pm.environment.set(\"userSessionToken\", jsonData.token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{userEmail}}\",\n\t\"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a single to-do task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59add86-a947-432a-b1e4-cc7a7565bd1a",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userSessionToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"{{$randomLoremParagraph}}\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/task",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3214c275-ec4e-4a57-a8b6-862cccfe864a",
								"exec": [
									"//1. grab the json data from response body",
									"var jsonData = pm.response.json();",
									"//2. then you target the data you want",
									"var idOfTask = jsonData.data[0]._id;",
									"//3. display on console",
									"//console.log(\"here is the extracted id\" + idOfTask);",
									"// set the extracted ID value to our Variable in environment",
									"pm.environment.set(\"taskId\", idOfTask);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userSessionToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/task",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the one task by information by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9280c5cb-1806-4e8a-a609-71bfc8606884",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userSessionToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/task/{{taskId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"task",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e22ceb0-0c8a-4ab4-84fb-e5ec4a6cc4b6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sucess).to.eql(true);",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.completed).to.eql(true);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userSessionToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"completed\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/task/{{taskId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"task",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a task with completed status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c34b11-afd5-4262-a898-9a966fb7e0d7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userSessionToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/task?completed=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"task"
							],
							"query": [
								{
									"key": "completed",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get task by pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d78f65fb-b677-4b05-9858-976da9a12cec",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userSessionToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/task?limit=2",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"task"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a task by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be1fac84-d28a-44a3-af0f-2b2eef8df2f3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"true\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userSessionToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/task/{{taskId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"task",
								"{{taskId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}